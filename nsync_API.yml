openapi: '3.0.3'
info:
  title: 'N Sync API Description'
  version: '1.0'
servers:
  - url: http://localhost:3000
paths:
  /test:
    get:
      responses:
        '200':
          description: OK
  /v1/users:
    get:
      tags:
      - Users
      summary: Gets all users registered in the system.
      responses:
        '200':
          description: All users retrieved succesfully.
    post:
      tags:
      - Users
      summary: Resgister a new user into the app.
      responses:
        '201':
          description: Get
  /v1/documents:
    post:
      tags:
      - Documents
      summary: Upload new documents into the app.
      responses:
        '201':
          description: 'A new document was created.'
    get:
      tags:
        - Documents
      summary: Get document per users
      responses:
        '200':
          description: 'Documents were retrieved correctly.'
  
  /v1/documents/request-docs:
    get:
      tags:
        - Documents


  /v1/users/{userid}/folders:
    post:
      tags:
        - Folders
      summary: Create a new folder
      parameters:
        - in: path
          name: userid
          required: true
          schema:
            type: number

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createFolderInput'

      responses:
        '201':
          description: Create a new folder
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/createFolderOutput'

  /v1/folders/{id}:
    delete:
      tags:
        - Folders
      summary: Delete a folder and its children
      parameters:
        - in: path
          name: id
          required: true
          schema: 
            $ref: '#/components/schemas/id'
      responses:
        '200':
          description: Delete folder and its children
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/folder'
              

  /v1/folders/{id}/child-folders:
    get:
      tags:
        - Folders
      parameters:
        - in: path
          name: id
          required: true
          schema: 
            $ref: '#/components/schemas/id'
      responses:
        '200':
          description: Get folder childen
          content:
            application/json:
              schema:
                type: object
                properties:
                  example:
                      type: string

  /v1/notification:
    get:
      tags:
        - Notifications


components:
  schemas:
#------------------  Field elements
    id:
      description: 'unique identification for a record in DB'
      type: integer
      example: 4059



  # User elements
    user:
      description: 'A person representation'
      type: object
      properties:
        id:
          type: integer
        identification:
          type: string
        name:
          type: string
        age:
          type: integer
        email:
          type: string
          format: email
        createdAt:
          type: string
        updatedAt:
          type: string
        isActive: 
          type: boolean
      example:
        id: 3045930495309453
        name: 'Jhon Doe'
        age: 45
        email: 'jhon.doe@example.com'
        createdAt: '29-07-2024 12:01:34 UTC'
        updatedAt: '29-07-2024 12:01:34 UTC'
        isActive: True


#Document elements
    document:
      description: 'document file metadata'
      type: object
      properties:
        id:
          type: integer
        filename:
          type: integer
        url:
          type: string
        owner:
          type: integer
        createdAt:
          type: string
        updatedAt:
          type: string
        isActive: 
          type: boolean
      example:
        id: 3045930495309453
        name: 'Buyways diplomma'
        owner: 34593459384752983
        url: 'https://www.example.com'
        createdAt: '29-07-2024 12:01:34 UTC'
        updatedAt: '29-07-2024 12:01:34 UTC'
        isActive: True
# Folder elements

    folder:
      description: 'Database entity'
      type: object
      properties:
        id: 
          type: integer
        name:
          type: string
        level:
          type: integer
        parentFolder:
          type: integer
        createdDate:
          type: string
        updatedDate:
          type: string
        isActived:
          type: boolean

    createFolderInput:
      description: expected object to create a new folder
      type: object
      properties:
        name:
          type: string
        parentFolderId:
          type: integer
      example:
        name: personal documents
        parentFolderId: 12


    folderOutput:
      type: object
      properties:    
        id: 
          type: integer
        name:
          type: string
        level:
          type: integer
        parentFolder:
          type: string
        createdDate:
          type: string
        updatedDate:
          type: string
        isActived:
          type: boolean
    createFolderOutput:
      description: folder output created
      type: object
      properties:
        message: 
          type: string
        folder:
          $ref: '#/components/schemas/folderOutput'
      example:
        message: 'Folder created succesfully.'
        folder:
          id: 3428
          name: personal Documents
          level: 4
          parentFolderId: 65
          createDate: '12/09/2024 12:15:00 UTC'
          updatedDate: '12/09/2024 12:15:00 UTC'
          isActive: true
    
    getChildrenFolderOutput:
      properties:
        message:
          type: string
        chidfolders:
          type: array
          items:
            $ref: '#/components/schemas/createFolderOutput'
            
            
             
            

        
